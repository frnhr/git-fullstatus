#!/usr/bin/env bash


declare -A FILE_STATUS

while IFS= read line; do
    status="${line:0:2}"
    file=`echo "${line:3}" | xargs`
    FILE_STATUS[$file]="$status"
done < <(git status --porcelain)


while IFS= read line; do
    if [ ! "${FILE_STATUS[$line]}" ]; then
        FILE_STATUS[$line]="  "
    fi
done < <(git ls-files)


# Thanks to @gniourf_gniourf via http://stackoverflow.com/a/30576368/236195
# quicksorts positional arguments
# return is in array qsort_ret
# Note: iterative, NOT recursive! :)
# First argument is a function name that takes two arguments and compares them
qsort() {
   (($#==0)) && return 0
   local stack=( 0 $(($#-1)) ) beg end i pivot smaller larger
   qsort_ret=("$@")
   while ((${#stack[@]})); do
      beg=${stack[0]}
      end=${stack[1]}
      stack=( "${stack[@]:2}" )
      smaller=() larger=()
      pivot=${qsort_ret[beg]}
      for ((i=beg+1;i<=end;++i)); do
         if [[ "${qsort_ret[i]}" < "$pivot" ]]; then
            smaller+=( "${qsort_ret[i]}" )
         else
            larger+=( "${qsort_ret[i]}" )
         fi
      done
      qsort_ret=( "${qsort_ret[@]:0:beg}" "${smaller[@]}" "$pivot" "${larger[@]}" "${qsort_ret[@]:end+1}" )
      if ((${#smaller[@]}>=2)); then stack+=( "$beg" "$((beg+${#smaller[@]}-1))" ); fi
      if ((${#larger[@]}>=2)); then stack+=( "$((end-${#larger[@]}+1))" "$end" ); fi
   done
}

qsort "${!FILE_STATUS[@]}"

for file in "${qsort_ret[@]}"; do
    echo "${FILE_STATUS[$file]} $file"
done
